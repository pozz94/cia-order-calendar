import express from "express";
import {query} from "dbUtils";
import {prepareOptions} from "apiUtils";

const generateRouter = (table, aliases) => {
    const router = express.Router();

    router.get("/", function(req, res, next) {
        const options = prepareOptions(req.query, aliases);
        query(`SELECT \`ID\` AS id FROM \`${table}\` ${options}`, [], async items => {
            res.json({
                "@self": {url: req.currentUrl, type: "collection"},
                collection: items.map(item => req.currentUrl.split("?")[0] + "/" + item.id)
            });
        });
    });

    router.post("/", function(req, res, next) {
        const aliasesArray = Object.keys(aliases);

        const columns = aliasesArray.map(element => aliases[element]).join(", ");

        const values = aliasesArray.map(element => req.body[element]);

        query(
            `INSERT INTO \`${table}\` (${columns}) VALUES (${aliasesArray
                .map(a => "?")
                .join(", ")}); SELECT LAST_INSERT_ID();`,
            values,
            async items => {
                console.log(items);
                res.json({url: req.currentUrl});
            }
        );
    });

    router.get("/:id([0-9]+)", function (req, res, next) {
        const aliasesArray = Object.keys(aliases);

        const columns = aliasesArray.map(element => `\`${aliases[element]}\` AS ${element}`).join(", ");

        query(
            `SELECT ${columns} FROM \`${table}\` WHERE \`ID\` = ?`,
            [parseInt(req.params.id)],
            rows => {
                if (rows.length) res.json({...rows[rows.length - 1], "@self":{url: req.currentUrl, type: "object"}});
                else res.status(404).json({error: "not found"});
            }
        );
    });

    router.put("/:id([0-9]+)", function(req, res, next) {
        const aliasesArray = Object.keys(aliases);

        const columns = aliasesArray.map(element => `\`${aliases[element]}\`=?`).join(", ");

        const values = aliasesArray.map(element => req.body[element]);

        query(
            `UPDATE \`${table}\` SET ${columns} WHERE \`ID\`= ?`,
            [...values, parseInt(req.params.id), parseInt(req.params.id)],
            async items => {
                res.json({url: req.currentUrl});
            }
        );
    });

    return router;
}

export default generateRouter;