import path from "path";
import fs from "fs";

let imports = "import express from \"express\";\n\n";
let routers = "\nconst router = express.Router();\n\nconst params2vars = (req, res, next) => {\n\treq.vars = {...req.params};\n\tnext();\n};\n\n"

//function to generate the list of routes
const routes = (dir, filelist = [], firstDir = null) => {
	firstDir = firstDir || dir;
	fs.readdirSync(dir).forEach(file => {
		filelist = fs.statSync(path.join(dir, file)).isDirectory()
			? routes(path.join(dir, file), filelist, firstDir)
			: filelist.concat(path.relative(firstDir, path.join(dir, file)));
	});
	return filelist;
};

const buildRouter = (routerPath, routesPath) => {
	//Read each file in the routesPath directory
	routes(routesPath)
		.map(route => {
			// Strip the .js suffix and split by slashes
			const urlSections = route
				.split(".")[0]
				.split(/[\\\/]/)
				.map(dir => {
					if (dir.match(/^\[.*?\]$/m)) dir = ":" + dir.slice(1, -1);
					return dir;
				})
				//Serve index files as father dir. Also removes empty items just to be safe
				.filter(dir => dir !== "index" && dir != "");

			//remove all directories that are in a scripts folder
			if (!urlSections.includes("scripts")) {
				return {
					file: routesPath + "/" + route.replace(/[\\\/]/g, "/"),
					url: "/" + urlSections.join("/"),
					urlSections
				};
			}
		})
		.filter(element => element != null)
		.sort(({urlSections: a}, {urlSections: b}) => {
			for (let i = 0, value; i < a.length && i < b.length; i++) {
				const params = [a, b].map(t => (t[i].startsWith(":") ? 1 : 0)).reduce((a, b) => a - b);
				const regex = [a, b]
					.map(t => (t[i].match(/^:\w+\(\S*\)$/) ? 1 : 0))
					.reduce((a, b) => a - b);
				//value = params - regex * 0.1 - (a.lenght - b.lenght)*0.001;
				if (params) return params;
				else if (regex) return regex;
			}
			return a.length - b.length + (a[a.length-1].length-b[b.length-1].length)*0.001;
		})
		.forEach(({ url, file }, index) => {
			file = path.normalize(file).split(/[\\\/]/g).join("/");

			imports += `import route${index}\tfrom "${file}";\n`

			routers += `router.use("${url}",\tparams2vars, route${index});\n`
		});

	fs.writeFile(routerPath, imports + routers + "\nexport default router;", (err, result) => {
		if (err) console.log('error', err);
	});
};

export default buildRouter;
