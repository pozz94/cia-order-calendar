import React, { Component } from "react";
import Autosuggest from "react-autosuggest";
import theme from "UI/AutoSuggestTheme.module.css";
import returnDebounced from "Utils/returnDebouncedFunction";

class AddDDT extends Component {
	constructor(props) {
		super(props);
		this.state = {
			suggestions: []
		};
	}

	suggestionValue = value => value[this.props.whichProperty];

	fetchSuggestions = ({ value }) => {
		if (value.length >= 2)
			fetch(this.props.fetchSuggestionsFrom + value.trim())
				.then(res => res.json())
				.then(res => {
					if (!res.error) this.setState({ suggestions: res });
					else this.setState({ suggestions: [] });
				});
		else this.setState({ suggestions: [] });
	};

	onChange = (event, { newValue }) => {
		const value = { ...this.props.value, [this.props.whichProperty]: newValue };
		this.props.setValue(value);
	};

	onSuggestionSelected = (event, { suggestion, method }) => {
		if (method === "enter") {
			event.preventDefault();
		}
		this.props.setValue(suggestion);
		this.props.onSelect && this.props.onSelect();
	};

	debouncedFetchSuggestions = returnDebounced(this.fetchSuggestions, 250);

	storeInputReference = autosuggest => {
		if (autosuggest !== null) {
			this.props.inputRef && this.props.inputRef(autosuggest.input);
		}
	};

	onEnter = callback => e => {
		if (e.key === "Enter") {
			e.preventDefault();
			callback();
		}
	};

	render = () => {
		const { suggestions } = this.state;
		const value = (this.props.value && this.props.value[this.props.whichProperty]) || "";

		const inputProps = {
			placeholder: this.props.placeholder || "",
			value: value,
			onChange: this.onChange,
			onKeyPress: e => {
				if (e.key === "Enter") {
					e.preventDefault();
					this.props.onEnter();
				}
			},
			onKeyDown: e => {
				if (e.keyCode === 9) {
					this.props.onTab && this.props.onTab();
				}
			}
		};

		return (
			<Autosuggest
				suggestions={suggestions}
				onSuggestionsFetchRequested={this.debouncedFetchSuggestions}
				onSuggestionsClearRequested={() =>
					this.setState({ suggestions: [] })
				}
				getSuggestionValue={
					this.suggestionValue
				}
				renderSuggestion={this.suggestionValue}
				onSuggestionSelected={this.onSuggestionSelected}
				highlightFirstSuggestion
				inputProps={inputProps}
				theme={theme}
				ref={this.storeInputReference}
			/>
		);
	};
}

export default AddDDT;
