import React, { Component } from "react";
import ColorPickerContext from "./Context";
import {
	rgb2hsl,
	hsl2rgb,
	string2color,
	formatText
} from "./utils/converters";
import { checker } from "./utils/styleHelper";

class Wrapper extends Component {
	constructor(props){
		super(props);
		this.state = {
			rgb: { r: 0, g: 0, b: 0, a: 1 },
			hsl: { h: 0, s: 0, l: 0, a: 1 },
			text: "#000000",
			temp: null,
			...string2color(this.props.defaultColor)
		};
	}

	formatText = format => formatText(this.state, format);
	
	updateColorRGB = rgb => this.setState({ rgb, hsl: rgb2hsl(rgb), text: this.formatText("rgbauto"), temp: null });
	updateColorHSL = hsl => this.setState({ hsl, rgb: hsl2rgb(hsl), text: this.formatText("hslauto"), temp: null });
	updateColor = color => this.setState({ ...color, temp: null });
	updateAlpha = alpha => {
		let { rgb, hsl, text } = this.state;
		rgb.a = alpha;
		hsl.a = alpha;
		if (text.startsWith("rgb") || text.startsWith("#"))
			text = this.formatText("rgbauto")
		else
			text = this.formatText("hslauto")
		this.setState({ rgb, hsl, text, temp: null });
	}
	setTemp = temp => this.setState({ temp });
	checker = (color1, color2 = null, direction = "90deg") => checker(
		color1,
		color2 || color1,
		(this.props.checker && this.props.checker.color1) || "#ccc",
		(this.props.checker && this.props.checker.color2) || "#ddd",
		(this.props.checker && this.props.checker.size) || "1rem",
		direction);
	componentWillUpdate = (prevProps, prevState) => {
		if (this.state.text !== prevState.text && this.props.format) {
			this.setState({ text: this.formatText(this.props.format) });
		}
	}
	componentDidUpdate=(prevProps, prevState)=>{
		if (this.state.text !== prevState.text) {
			this.props.onChange && this.props.onChange(this.state.text);
		}
	}
	componentWillMount = () => this.setState({ text: this.formatText(this.props.format || "") });
	componentDidMount = () => this.props.onChange && this.props.onChange(this.state.text);
	render = () => {
		return (
			<ColorPickerContext.Provider
				value={{
					rgb: this.state.rgb,
					hsl: this.state.hsl,
					text: this.state.text,
					temp: this.state.temp,
					theme: this.props.theme,
					updateColorRGB: this.updateColorRGB,
					updateColorHSL: this.updateColorHSL,
					updateColor: this.updateColor,
					updateAlpha: this.updateAlpha,
					setTemp: this.setTemp,
					checker: this.checker
				}}
			>
				<div className={this.props.theme.wrapper || ""}>
					{this.props.children}
				</div>
			</ColorPickerContext.Provider>
		);
	};
}

export default Wrapper;