import { rgb2hsl, rgb2string } from "./converters"

/**
 * Given a 3-element array of R, G, B varying from 0 to 255, return the luminance
 * as a number from 0 to 1.
 * @param {Array<number>} rgb 3-element array of a color
 * @returns {number} luminance, between 0 and 1
 * @example
 * var luminance = require('relative-luminance');
 * var black_lum = luminance([0, 0, 0]); // 0
 */
const relativeLuminance = (rgb) => {
	// red, green, and blue coefficients
	const rc = 0.2126;
	const gc = 0.7152;
	const bc = 0.0722;
	// low-gamma adjust coefficient
	const lowc = 1 / 12.92;

	const rsrgb = rgb.r / 255;
	const gsrgb = rgb.g / 255;
	const bsrgb = rgb.b / 255;
	const adjustGamma = (C) => Math.pow((C + 0.055) / 1.055, 2.4);

	const r = rsrgb <= 0.03928 ? rsrgb * lowc : adjustGamma(rsrgb);
	const g = gsrgb <= 0.03928 ? gsrgb * lowc : adjustGamma(gsrgb);
	const b = bsrgb <= 0.03928 ? bsrgb * lowc : adjustGamma(bsrgb);

	return r * rc + g * gc + b * bc;
}

const optimalTextColor = (rgb) => relativeLuminance(rgb) < 0.5 ? "white" : "black";

const mixColors = (a, b) => {
		let rgb = {
			r: Math.round(((a.rgb.r * a.rgb.a) + (b.rgb.r * b.rgb.a)) / (a.rgb.a + b.rgb.a))||0,
			g: Math.round(((a.rgb.g * a.rgb.a) + (b.rgb.g * b.rgb.a)) / (a.rgb.a + b.rgb.a))||0,
			b: Math.round(((a.rgb.b * a.rgb.a) + (b.rgb.b * b.rgb.a)) / (a.rgb.a + b.rgb.a))||0,
			a: (a.rgb.a + b.rgb.a) / 2 || 0
		};
		return {
			rgb: rgb,
			hsl: rgb2hsl(rgb),
			text: rgb2string(rgb)
		}
	}
const alphaMixColors = (color, background) => {
	let rgb = {
		r: Math.round(((color.rgb.r * color.rgb.a) + (background.rgb.r * (1-color.rgb.a))))||0,
		g: Math.round(((color.rgb.g * color.rgb.a) + (background.rgb.g * (1-color.rgb.a))))||0,
		b: Math.round(((color.rgb.b * color.rgb.a) + (background.rgb.b * (1-color.rgb.a))))||0,
		a: background.rgb.a
	};
	return {
		rgb: rgb,
		hsl: rgb2hsl(rgb),
		text: rgb2string(rgb)
	}
}

export {
	//luminance
	relativeLuminance,
	optimalTextColor,

	//mix
	mixColors,
	alphaMixColors
};