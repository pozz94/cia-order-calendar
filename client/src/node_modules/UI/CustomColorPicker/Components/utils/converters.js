const rgb2hsl = ({ r, g, b, a }) => {
	r /= 255;
	g /= 255;
	b /= 255;

	let max = Math.max(r, g, b),
		min = Math.min(r, g, b);
	let h,
		s,
		l = (max + min) / 2;

	if (max === min) {
		h = s = 0; // achromatic
	} else {
		let d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

		switch (max) {
			case r:
				h = (g - b) / d + (g < b ? 6 : 0);
				break;
			case g:
				h = (b - r) / d + 2;
				break;
			case b:
				h = (r - g) / d + 4;
				break;
			default:
				h = 0;
		}

		h /= 6;
	}

	return {
		h: Math.round(h * 360),
		s: Math.round(s * 100),
		l: Math.round(l * 100),
		a
	};
};

const hsl2rgb = ({ h, s, l, a }) =>{
	h /= 360;
	s /= 100;
	l /= 100;
	let r, g, b;

	if (s === 0) {
		r = g = b = l; // achromatic
	} else {
		function hue2rgb(p, q, t) {
			if (t < 0) t += 1;
			if (t > 1) t -= 1;
			if (t < 1 / 6) return p + (q - p) * 6 * t;
			if (t < 1 / 2) return q;
			if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
			return p;
		}

		let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		let p = 2 * l - q;

		r = hue2rgb(p, q, h + 1 / 3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1 / 3);
	}

	return {
		r: Math.round(r * 255),
		g: Math.round(g * 255),
		b: Math.round(b * 255),
		a
	};
}

const hsl2string = ({ h, s, l }) => `hsl(${Math.round(h)}, ${Math.round(s)}%, ${Math.round(l)}%)`;
const hsla2string = ({ h, s, l, a }) => `hsla(${Math.round(h)}, ${Math.round(s)}%, ${Math.round(l)}%, ${a})`;
const hsl2string_autoformat = (colorObj) => {
	// eslint-disable-next-line
	if (colorObj.a && colorObj.a == 1)
		return hsl2string(colorObj);
	else
		return hsla2string(colorObj);
};

const rgb2string = ({ r, g, b }) => `rgb(${r}, ${g}, ${b})`;
const rgba2string = ({ r, g, b, a }) => `rgba(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)}, ${a})`;
const rgb2string_hex = ({ r, g, b }) => {
	const int2hex = (int) => Math.round(int).toString(16).padStart(2, '0');
	return `#${int2hex(r)}${int2hex(g)}${int2hex(b)}`;
}
const rgb2string_autoformat = (colorObj) => {
	// eslint-disable-next-line
	if (colorObj.a && colorObj.a == 1)
		return rgb2string_hex(colorObj);
	else
		return rgba2string(colorObj);
}

function name2hex(name)
{
	var colors = {
		"aliceblue": "#f0f8ff", "antiquewhite": "#faebd7", "aqua": "#00ffff", "aquamarine": "#7fffd4",
		"azure": "#f0ffff", "beige": "#f5f5dc", "bisque": "#ffe4c4", "black": "#000000",
		"blanchedalmond": "#ffebcd", "blue": "#0000ff", "blueviolet": "#8a2be2", "brown": "#a52a2a",
		"burlywood": "#deb887", "cadetblue": "#5f9ea0", "chartreuse": "#7fff00", "chocolate": "#d2691e",
		"coral": "#ff7f50", "cornflowerblue": "#6495ed", "cornsilk": "#fff8dc", "crimson": "#dc143c",
		"cyan": "#00ffff", "darkblue": "#00008b", "darkcyan": "#008b8b", "darkgoldenrod": "#b8860b",
		"darkgray": "#a9a9a9", "darkgreen": "#006400", "darkkhaki": "#bdb76b", "darkmagenta": "#8b008b",
		"darkolivegreen": "#556b2f", "darkorange": "#ff8c00", "darkorchid": "#9932cc",
		"darkred": "#8b0000", "darksalmon": "#e9967a", "darkseagreen": "#8fbc8f",
		"darkslateblue": "#483d8b", "darkslategray": "#2f4f4f", "darkturquoise": "#00ced1",
		"darkviolet": "#9400d3", "deeppink": "#ff1493", "deepskyblue": "#00bfff", "dimgray": "#696969",
		"dodgerblue": "#1e90ff", "firebrick": "#b22222", "floralwhite": "#fffaf0",
		"forestgreen": "#228b22", "fuchsia": "#ff00ff", "gainsboro": "#dcdcdc", "ghostwhite": "#f8f8ff",
		"gold": "#ffd700", "goldenrod": "#daa520", "gray": "#808080", "green": "#008000",
		"greenyellow": "#adff2f", "honeydew": "#f0fff0", "hotpink": "#ff69b4", "indianred ": "#cd5c5c",
		"indigo": "#4b0082", "ivory": "#fffff0", "khaki": "#f0e68c", "lavender": "#e6e6fa",
		"lavenderblush": "#fff0f5", "lawngreen": "#7cfc00", "lemonchiffon": "#fffacd",
		"lightblue": "#add8e6", "lightcoral": "#f08080", "lightcyan": "#e0ffff",
		"lightgoldenrodyellow": "#fafad2", "lightgray": "#d3d3d3", "lightgreen": "#90ee90",
		"lightpink": "#ffb6c1", "lightsalmon": "#ffa07a", "lightseagreen": "#20b2aa",
		"lightskyblue": "#87cefa", "lightslategray": "#778899", "lightsteelblue": "#b0c4de",
		"lightyellow": "#ffffe0", "lime": "#00ff00", "limegreen": "#32cd32", "linen": "#faf0e6",
		"magenta": "#ff00ff", "maroon": "#800000", "mediumaquamarine": "#66cdaa",
		"mediumblue": "#0000cd", "mediumorchid": "#ba55d3", "mediumpurple": "#9370d8",
		"mediumseagreen": "#3cb371", "mediumslateblue": "#7b68ee", "mediumspringgreen": "#00fa9a",
		"mediumturquoise": "#48d1cc", "mediumvioletred": "#c71585", "midnightblue": "#191970",
		"mintcream": "#f5fffa", "mistyrose": "#ffe4e1", "moccasin": "#ffe4b5", "navajowhite": "#ffdead",
		"navy": "#000080", "oldlace": "#fdf5e6", "olive": "#808000", "olivedrab": "#6b8e23",
		"orange": "#ffa500", "orangered": "#ff4500", "orchid": "#da70d6", "palegoldenrod": "#eee8aa",
		"palegreen": "#98fb98", "paleturquoise": "#afeeee", "palevioletred": "#d87093",
		"papayawhip": "#ffefd5", "peachpuff": "#ffdab9", "peru": "#cd853f", "pink": "#ffc0cb",
		"plum": "#dda0dd", "powderblue": "#b0e0e6", "purple": "#800080", "rebeccapurple": "#663399",
		"red": "#ff0000", "rosybrown": "#bc8f8f", "royalblue": "#4169e1", "saddlebrown": "#8b4513",
		"salmon": "#fa8072", "sandybrown": "#f4a460", "seagreen": "#2e8b57", "seashell": "#fff5ee",
		"sienna": "#a0522d", "silver": "#c0c0c0", "skyblue": "#87ceeb", "slateblue": "#6a5acd",
		"slategray": "#708090", "snow": "#fffafa", "springgreen": "#00ff7f", "steelblue": "#4682b4",
		"tan": "#d2b48c", "teal": "#008080", "thistle": "#d8bfd8", "tomato": "#ff6347",
		"turquoise": "#40e0d0", "violet": "#ee82ee", "wheat": "#f5deb3", "white": "#ffffff",
		"whitesmoke": "#f5f5f5", "yellow": "#ffff00", "yellowgreen": "#9acd32"
	};

	name = name.toLowerCase().replace(/ /g, "").replace("grey", "gray");
    if (typeof colors[name] != 'undefined')
        return colors[name];

    return false;
}

const hex2rgb = hex => {
	const result = /^#(?:(?:([a-f\d]{2})([a-f\d]{2})([a-f\d]{2}))|(?:([a-f\d])([a-f\d])([a-f\d]))|([a-f\d]{2})|([a-f\d]))$/i.exec(hex);
	return result ? {
		...{
			r:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[4], 16) * 17 ||
				parseInt(result[1], 16) || 0,
			g:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[5], 16) * 17 ||
				parseInt(result[2], 16) || 0,
			b:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[6], 16) * 17 ||
				parseInt(result[3], 16) || 0,
		}
	} : false;
}

const string2color = color => {
	const result = /^(rgb|hsl|#)(?:a?\(([.%, \d]{1,})\)$|(?:[a-f\d]{1,6}))$/i.exec(color);
	const type = result && result[1];
	let numbers = result && result[2] && result[2].split(",");
	numbers = (numbers && numbers.map(number => number.replace(/ /g, "")))||[];
	let output = {
		rgb: { r: 0, g: 0, b: 0, a: 0 },
		hsl: { h: 0, s: 0, l: 0, a: 0 }
	};
	const parseNum = (number, base) => {
		if (number.endsWith("%")) {
			return Math.round(parseFloat(number.slice(0, -1) / 100 ) * base);
		} else if (number.includes(".") && parseFloat(number) <= 1) {
			return Math.round(parseFloat(number) * base);
		} else {
			let num = Math.round(parseFloat(number));
			return (num > base) ? base : num;
		}
	}
	if (type === "#") {
		if (hex2rgb(color)) {
			output.rgb = hex2rgb(color);
			output.rgb.a = 1;
			output.text = (rgb2string_autoformat(output.rgb))
			output.hsl = rgb2hsl(output.rgb);
		}
		else return;
	}
	else if (numbers.length >= 3 && numbers.length <= 4) {
		if (type === "rgb") {
			output.rgb.r = parseNum(numbers[0], 255);
			output.rgb.g = parseNum(numbers[1], 255);
			output.rgb.b = parseNum(numbers[2], 255);
			if (numbers[3] !== undefined && numbers[3] !== null && numbers[3] !== "")
				output.rgb.a = parseNum(numbers[3], 1000) / 1000;
			else
				output.rgb.a = 1;
			output.text = (rgb2string_autoformat(output.rgb))
			output.hsl = rgb2hsl(output.rgb);
		}
		else if (type === "hsl") {
			output.hsl.h = parseNum(numbers[0], 360);
			output.hsl.s = parseNum(numbers[1], 100);
			output.hsl.l = parseNum(numbers[2], 100);
			if (numbers[3] !== undefined && numbers[3] !== null && numbers[3] !== "")
				output.hsl.a = parseNum(numbers[3], 1000) / 1000;
			else
				output.hsl.a = 1;
			output.text = (hsl2string_autoformat(output.hsl))
			output.rgb = hsl2rgb(output.hsl);
		}
		else return;
	}
	else if(type === "rgb" && numbers.length >= 1 && numbers.length <= 2){
		output.rgb.r = parseNum(numbers[0], 255);
		output.rgb.g = parseNum(numbers[0], 255);
		output.rgb.b = parseNum(numbers[0], 255);
		if (numbers[1] !== undefined && numbers[1] !== null && numbers[1] !== "")
			output.rgb.a = parseNum(numbers[1], 1000) / 1000;
		else
			output.rgb.a = 1;
		output.text = (rgb2string_autoformat(output.rgb))
		output.hsl = rgb2hsl(output.rgb);
	}
	else if (typeof color === "string") {
		if (name2hex(color)) {
			output = string2color(name2hex(color));
		}
		else return;
	}
	else {
		console.log("string2color error");
		return;
	}

	return output;
}

const formatText = ({ rgb, hsl },format) => {
	switch (format) {
		case "hex":
			return rgb2string_hex(rgb);
		case "rgb":
			return rgb2string(rgb);
		case "rgba":
			return rgba2string(rgb);
		case "rgbauto":
			return rgb2string_autoformat(rgb);
		case "hsl":
			return hsl2string(hsl);
		case "hsla":
			return hsla2string(hsl);
		case "hslauto":
			return hsl2string_autoformat(hsl);
		default:
			return rgb2string_autoformat(rgb);
	}
}

export {
	//obj to obj
	hsl2rgb,
	rgb2hsl,

	//obj to string
	hsl2string,
	hsla2string,
	hsl2string_autoformat,
	
	rgb2string,
	rgba2string,
	rgb2string_hex,
	rgb2string_autoformat,
	formatText,

	//string to obj
	hex2rgb,
	string2color,
};
