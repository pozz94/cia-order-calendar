import { useState, useEffect, useRef } from "react";

function getScrollParent(element, includeHidden) {
    var style = getComputedStyle(element);
    var excludeStaticParent = style.position === "absolute";
    var overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;

    if (style.position === "fixed") return document.body;
    for (var parent = element; (parent = parent.parentElement);) {
        style = getComputedStyle(parent);
        if (excludeStaticParent && style.position === "static") {
            continue;
        }
        if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;
    }

    return document.body;
}

function clamp(val, min, max) {
    return val > max ? max : val < min ? min : val;
}

const useVisibleRatio = (thresholds = 100) => {
	const ref = useRef();
	const [visibleRatio, setVisibleRatio] = useState(0);

	useEffect(() => {
		const currentRef = ref.current
		const observer = new IntersectionObserver(([entry]) => {

			//setVisibleRatio(entry.intersectionRatio);
			const element = entry.target;
			const box = element.getBoundingClientRect()
			
			const scrollParent = getScrollParent(entry.target)
			setVisibleRatio(
				clamp(
					box.height + element.offsetTop - scrollParent.scrollTop,
					0,
					box.height
				)
				/ box.height
			);
		}, { threshold: [...Array(thresholds + 1).keys()].map(x => x / thresholds) })

		if(currentRef)
			observer.observe(currentRef)
		
		return () => {
			if(currentRef)
				observer.unobserve(currentRef)
		}
	}, [ref, visibleRatio, thresholds])

	return [visibleRatio, ref];
}

export default useVisibleRatio;