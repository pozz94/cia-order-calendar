const hex2rgb = hex => {
	const result = /^#(?:(?:([a-f\d]{2})([a-f\d]{2})([a-f\d]{2}))|(?:([a-f\d])([a-f\d])([a-f\d]))|([a-f\d]{2})|([a-f\d]))$/i.exec(hex);
	return result ? {
		...{
			r:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[4], 16) * 17 ||
				parseInt(result[1], 16) || 0,
			g:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[5], 16) * 17 ||
				parseInt(result[2], 16) || 0,
			b:
				parseInt(result[8], 16) * 17 ||
				parseInt(result[7], 16) ||
				parseInt(result[6], 16) * 17 ||
				parseInt(result[3], 16) || 0,
		}
	} : false;
}

const relativeLuminance = (rgb) => {
	// red, green, and blue coefficients
	const rc = 0.2126;
	const gc = 0.7152;
	const bc = 0.0722;
	// low-gamma adjust coefficient
	const lowc = 1 / 12.92;

	const rsrgb = rgb.r / 255;
	const gsrgb = rgb.g / 255;
	const bsrgb = rgb.b / 255;
	const adjustGamma = (C) => Math.pow((C + 0.055) / 1.055, 2.4);

	const r = rsrgb <= 0.03928 ? rsrgb * lowc : adjustGamma(rsrgb);
	const g = gsrgb <= 0.03928 ? gsrgb * lowc : adjustGamma(gsrgb);
	const b = bsrgb <= 0.03928 ? bsrgb * lowc : adjustGamma(bsrgb);

	return r * rc + g * gc + b * bc;
}

const optimalTextColor = (hex) => relativeLuminance(hex2rgb(hex)) < 0.5 ? "white" : "black";

export default optimalTextColor;